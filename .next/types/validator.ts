// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}

type ApiRouteConfig = {
  default: (req: any, res: any) => Promise<void> | void | Promise<Response> | Response
  config?: {
    api?: {
      bodyParser?: boolean | { sizeLimit?: string }
      responseLimit?: string | number
      externalResolver?: boolean
    }
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    maxDuration?: number
  }
}


// Validate ..\app\(auth)\(routes)\sign-in\[[...sign-in]]\page.tsx
{
  const handler = {} as typeof import("..\\app\\(auth)\\(routes)\\sign-in\\[[...sign-in]]\\page.js")
  handler satisfies AppPageConfig<"/sign-in/[[...sign-in]]">
}

// Validate ..\app\(auth)\(routes)\sign-up\[[...sign-up]]\page.tsx
{
  const handler = {} as typeof import("..\\app\\(auth)\\(routes)\\sign-up\\[[...sign-up]]\\page.js")
  handler satisfies AppPageConfig<"/sign-up/[[...sign-up]]">
}

// Validate ..\app\(invite)\(routes)\invite\[inviteCode]\page.tsx
{
  const handler = {} as typeof import("..\\app\\(invite)\\(routes)\\invite\\[inviteCode]\\page.js")
  handler satisfies AppPageConfig<"/invite/[inviteCode]">
}

// Validate ..\app\(main)\(routes)\servers\[serverId]\channels\[channelId]\page.tsx
{
  const handler = {} as typeof import("..\\app\\(main)\\(routes)\\servers\\[serverId]\\channels\\[channelId]\\page.js")
  handler satisfies AppPageConfig<"/servers/[serverId]/channels/[channelId]">
}

// Validate ..\app\(main)\(routes)\servers\[serverId]\conversations\[memberId]\page.tsx
{
  const handler = {} as typeof import("..\\app\\(main)\\(routes)\\servers\\[serverId]\\conversations\\[memberId]\\page.js")
  handler satisfies AppPageConfig<"/servers/[serverId]/conversations/[memberId]">
}

// Validate ..\app\(main)\(routes)\servers\[serverId]\page.tsx
{
  const handler = {} as typeof import("..\\app\\(main)\\(routes)\\servers\\[serverId]\\page.js")
  handler satisfies AppPageConfig<"/servers/[serverId]">
}

// Validate ..\app\(setup)\page.tsx
{
  const handler = {} as typeof import("..\\app\\(setup)\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\app\api\channels\[channelId]\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\channels\\[channelId]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/channels/[channelId]">
}

// Validate ..\app\api\channels\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\channels\\route.js")
  handler satisfies RouteHandlerConfig<"/api/channels">
}

// Validate ..\app\api\direct-messages\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\direct-messages\\route.js")
  handler satisfies RouteHandlerConfig<"/api/direct-messages">
}

// Validate ..\app\api\livekit\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\livekit\\route.js")
  handler satisfies RouteHandlerConfig<"/api/livekit">
}

// Validate ..\app\api\members\[memberId]\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\members\\[memberId]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/members/[memberId]">
}

// Validate ..\app\api\messages\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\messages\\route.js")
  handler satisfies RouteHandlerConfig<"/api/messages">
}

// Validate ..\app\api\servers\[serverId]\invite-code\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\servers\\[serverId]\\invite-code\\route.js")
  handler satisfies RouteHandlerConfig<"/api/servers/[serverId]/invite-code">
}

// Validate ..\app\api\servers\[serverId]\leave\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\servers\\[serverId]\\leave\\route.js")
  handler satisfies RouteHandlerConfig<"/api/servers/[serverId]/leave">
}

// Validate ..\app\api\servers\[serverId]\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\servers\\[serverId]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/servers/[serverId]">
}

// Validate ..\app\api\servers\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\servers\\route.js")
  handler satisfies RouteHandlerConfig<"/api/servers">
}

// Validate ..\app\api\uploadthing\route.ts
{
  const handler = {} as typeof import("..\\app\\api\\uploadthing\\route.js")
  handler satisfies RouteHandlerConfig<"/api/uploadthing">
}



// Validate ..\pages\api\socket\direct-messages\[directMessageId].ts
{
  const handler = {} as typeof import("..\\pages\\api\\socket\\direct-messages\\[directMessageId].js")
  handler satisfies ApiRouteConfig
}

// Validate ..\pages\api\socket\direct-messages\index.ts
{
  const handler = {} as typeof import("..\\pages\\api\\socket\\direct-messages\\index.js")
  handler satisfies ApiRouteConfig
}

// Validate ..\pages\api\socket\io.ts
{
  const handler = {} as typeof import("..\\pages\\api\\socket\\io.js")
  handler satisfies ApiRouteConfig
}

// Validate ..\pages\api\socket\messages\[messageId].ts
{
  const handler = {} as typeof import("..\\pages\\api\\socket\\messages\\[messageId].js")
  handler satisfies ApiRouteConfig
}

// Validate ..\pages\api\socket\messages\index.ts
{
  const handler = {} as typeof import("..\\pages\\api\\socket\\messages\\index.js")
  handler satisfies ApiRouteConfig
}

// Validate ..\app\(auth)\(routes)\layout.tsx
{
  const handler = {} as typeof import("..\\app\\(auth)\\(routes)\\layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ..\app\(main)\(routes)\servers\[serverId]\layout.tsx
{
  const handler = {} as typeof import("..\\app\\(main)\\(routes)\\servers\\[serverId]\\layout.js")
  handler satisfies LayoutConfig<"/servers/[serverId]">
}

// Validate ..\app\(main)\layout.tsx
{
  const handler = {} as typeof import("..\\app\\(main)\\layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ..\app\layout.tsx
{
  const handler = {} as typeof import("..\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
