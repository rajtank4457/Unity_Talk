// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/invite/[inviteCode]" | "/servers/[serverId]" | "/servers/[serverId]/channels/[channelId]" | "/servers/[serverId]/conversations/[memberId]" | "/sign-in/[[...sign-in]]" | "/sign-up/[[...sign-up]]"
type AppRouteHandlerRoutes = "/api/channels" | "/api/channels/[channelId]" | "/api/direct-messages" | "/api/livekit" | "/api/members/[memberId]" | "/api/messages" | "/api/servers" | "/api/servers/[serverId]" | "/api/servers/[serverId]/invite-code" | "/api/servers/[serverId]/leave" | "/api/uploadthing"
type PageRoutes = never
type LayoutRoutes = "/" | "/servers/[serverId]"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/api/channels": {}
  "/api/channels/[channelId]": { "channelId": string; }
  "/api/direct-messages": {}
  "/api/livekit": {}
  "/api/members/[memberId]": { "memberId": string; }
  "/api/messages": {}
  "/api/servers": {}
  "/api/servers/[serverId]": { "serverId": string; }
  "/api/servers/[serverId]/invite-code": { "serverId": string; }
  "/api/servers/[serverId]/leave": { "serverId": string; }
  "/api/uploadthing": {}
  "/invite/[inviteCode]": { "inviteCode": string; }
  "/servers/[serverId]": { "serverId": string; }
  "/servers/[serverId]/channels/[channelId]": { "serverId": string; "channelId": string; }
  "/servers/[serverId]/conversations/[memberId]": { "serverId": string; "memberId": string; }
  "/sign-in/[[...sign-in]]": { "sign-in"?: string[]; }
  "/sign-up/[[...sign-up]]": { "sign-up"?: string[]; }
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/servers/[serverId]": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
